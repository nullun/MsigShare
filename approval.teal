#pragma version 8

// Deploy MsigTxnShare
// Args:
//  + uint8: Msig Signer Major Version
//  + uint8: Msig Signer Minor Version
// Returns:
//  + uint64: Application ID
method "deploy(uint8,uint8)uint64"
txna ApplicationArgs 0
==
bnz method_deploy

// Set Signatures
// Signatures can only be added by the account holder.
// Args:
//  + byte[][]: bytearray of bytearray containing 1 to 16 signatures
method "setSignatures(byte[][])void"
txna ApplicationArgs 0
==
bnz method_set_signatures

// Clear Signatures
method "clearSignatures()void"
txna ApplicationArgs 0
==
bnz method_clear_signatures

// Add Account
// Args:
//  + uint8: Multisig account index
//  + account: Account to add
method "addAccount(uint8,account)void"
txna ApplicationArgs 0
==
bnz method_add_account

// Remove Account
// Args:
//  + account: Account to remove
method "removeAccount(account)void"
txna ApplicationArgs 0
==
bnz method_remove_account

// Add Transaction
// Args:
//  + uint8: Group transaction index
//  + byte[]: Transaction bytes
method "addTransaction(uint8,byte[])void"
txna ApplicationArgs 0
==
bnz method_add_transaction

// Remove Transaction
// Args:
//  + uint8: Group transaction index
method "removeTransaction(uint8)void"
txna ApplicationArgs 0
==
bnz method_remove_transaction

// Set Threshold
// Args:
//  + New threshold
method "setThreshold(uint8)void"
txna ApplicationArgs 0
==
bnz method_set_threshold

// Destroy
method "destroy()void"
txna ApplicationArgs 0
==
bnz method_destroy

// Update
method "update(uint8,uint8)void"
txna ApplicationArgs 0
==
bnz method_update

err

method_deploy:
  txn OnCompletion
  int NoOp
  ==
  assert

  txn ApplicationID
  !
  assert

  // Store Msig Signer Major Version
  byte "VersionMajor"
  txna ApplicationArgs 1
  btoi
  app_global_put

  // Store Msig Signer Minor Version
  byte "VersionMinor"
  txna ApplicationArgs 2
  btoi
  app_global_put

  // Set threshold to 1 (default)
  byte "Threshold"
  int 1
  app_global_put

  // Return Application ID
  byte 0x151f7c75
  global CurrentApplicationID
  itob
  concat
  log

  int 1
  return

method_destroy:
  txn OnCompletion
  int DeleteApplication
  ==
  assert

  txn ApplicationID
  assert

  txn Sender
  global CreatorAddress
  ==
  assert

  itxn_begin

  int pay
  itxn_field TypeEnum

  global CreatorAddress
  itxn_field Receiver

  global CreatorAddress
  itxn_field CloseRemainderTo

  itxn_submit

  int 1
  return

method_update:
  txn OnCompletion
  int UpdateApplication
  ==
  assert

  txn ApplicationID
  assert

  txn Sender
  global CreatorAddress
  ==
  assert

  // Store Msig Signer Major Version
  byte "VersionMajor"
  txna ApplicationArgs 1
  btoi
  app_global_put

  // Store Msig Signer Minor Version
  byte "VersionMinor"
  txna ApplicationArgs 2
  btoi
  app_global_put

  int 1
  return

method_set_threshold:
  txn OnCompletion
  int NoOp
  ==
  assert

  txn ApplicationID
  assert

  txn Sender
  global CreatorAddress
  ==
  assert

  // Set threshold
  byte "Threshold"
  txna ApplicationArgs 1
  btoi
  app_global_put

  int 1
  return

method_add_transaction:
  txn OnCompletion
  int NoOp
  ==
  assert

  txn ApplicationID
  assert

  txn Sender
  global CreatorAddress
  ==
  assert

  // Delete the box if it already exists
  txna ApplicationArgs 1
  callsub sub_index_to_box
  box_del
  pop

  // Create the box
  txna ApplicationArgs 1    // 0
  callsub sub_index_to_box  // txn0
  txna ApplicationArgs 2    // txn0 abidata
  int 0                     // txn0 abidata 0
  extract_uint16            // txn0 txnlen
  box_create                // 1
  assert                    //

  // Place the txn in the box
  txna ApplicationArgs 1    // 0
  callsub sub_index_to_box  // txn0
  txna ApplicationArgs 2    // txn0 abidata
  dup                       // txn0 abidata abidata
  int 0                     // txn0 abidata abidata 0
  extract_uint16            // txn0 abidata txnlen
  int 2                     // txn0 abidata txnlen 2
  swap                      // txn0 abidata 2 txnlen
  int 2
  +
  substring3                // txn0 txndata
  box_put                   //

  int 1
  return

method_remove_transaction:
  txn OnCompletion
  int NoOp
  ==
  assert

  txn ApplicationID
  assert

  txn Sender
  global CreatorAddress
  ==
  assert

  // Delete the box if it exists
  txna ApplicationArgs 1
  callsub sub_index_to_box
  box_del
  pop

  int 1
  return

method_add_account:
  txn OnCompletion
  int NoOp
  ==
  assert

  txn ApplicationID
  assert

  txn Sender
  global CreatorAddress
  ==
  assert

  // Store account key with multisig index value
  txna ApplicationArgs 2
  btoi
  txnas Accounts
  txna ApplicationArgs 1
  btoi
  app_global_put

  int 1
  return

method_remove_account:
  txn OnCompletion
  int NoOp
  ==
  assert

  txn ApplicationID
  assert

  txn Sender
  global CreatorAddress
  ==
  assert

  // Delete account and multisig index
  txna ApplicationArgs 1
  btoi
  txnas Accounts
  app_global_del

  int 1
  return

// Scratch Slots:
//  0: Counter
//  1: Number of byte[] in byte[][]
//  2: Start of current byte[]
//  3: Size of current byte[]
method_set_signatures:
  txn OnCompletion
  int NoOp
  ==
  txn OnCompletion
  int OptIn
  ==
  ||
  assert

  txn ApplicationID
  assert

  callsub sub_is_sender_in_multisig
  assert

  // process byte[][]
  txna ApplicationArgs 1
  int 0
  extract_uint16
  store 1 // Number of arrays

  // Starting at index 0, add each sig to an indexed kv-pair
  int 0
  loop_add_sig:
  store 0
  txn Sender
  load 0
  itob
  substring 7 8

  // Get start of current byte[]
  // index * 2 + 2
  txna ApplicationArgs 1
  int 2
  int 2
  load 0
  *
  +
  extract_uint16
  store 2 // Start of byte[]

  // Get size of current byte[]
  txna ApplicationArgs 1
  int 2
  load 2
  +
  extract_uint16
  store 3 // Size of byte[]

  // Get signature from byte[]
  txna ApplicationArgs 1
  load 2 // Start of byte[]
  int 4 // 2 + 2 (size of byte[][] and size of current byte[])
  +
  dup
  load 3 // Size of byte[]
  +
  substring3
  app_local_put

  // Increment counter
  load 0
  int 1
  +
  dup

  // Check for additional signatures
  load 1
  <
  bnz loop_add_sig

  // Clear remaining signatures
  txn Sender
  swap
  callsub sub_clear_signatures

  int 1
  return

method_clear_signatures:
  txn OnCompletion
  int NoOp
  ==
  txn OnCompletion
  int CloseOut
  ==
  ||
  assert

  txn ApplicationID
  assert

  callsub sub_is_sender_in_multisig
  assert

  // Delete all 16 potential signatures
  txn Sender
  int 0
  callsub sub_clear_signatures

  int 1
  return

// Args:
//  + byte value (0x00 - 0x0f)
// Returns:
//  + byte value representing numbers (0 - 15)
sub_index_to_box:
  proto 1 1
  byte "txn"

  // Convert to uint
  frame_dig -1
  btoi
  frame_bury -1

  // Only allow values 0x00 to 0x0f (0-15)
  frame_dig -1
  int 16
  <
  assert

  // If larger than 9 we need to produce two digits
  frame_dig -1
  int 9
  >
  bnz sub_index_to_box_two_digits
  
  // Return single digit
  frame_dig 0
  frame_dig -1
  int 48
  +
  itob
  substring 7 8
  concat
  b end_sub_index_to_box

  sub_index_to_box_two_digits:
  frame_dig 0
  byte "1"
  frame_dig -1
  int 10
  %
  int 48
  +
  itob
  substring 7 8
  concat
  concat

  end_sub_index_to_box:
  frame_bury 0
  retsub

// Sender must have a keyed index in the multisig
sub_is_sender_in_multisig:
  proto 0 1
  int 0
  global CurrentApplicationID
  txn Sender
  app_global_get_ex
  swap
  pop
  frame_bury 0
  retsub

// Clear signatures from Ith position to 16th position
// Args:
//  + Account
//  + Ith position
sub_clear_signatures:
  proto 2 0

  // Delete remaining signatures
  loop_del_sig:
  frame_dig -2
  frame_dig -1
  itob
  substring 7 8
  app_local_del

  // Increment counter
  frame_dig -1
  int 1
  +
  dup
  frame_bury -1
  int 16
  <
  bnz loop_del_sig

  retsub

